name: Deploy Frontend
on:
  push:
    branches:
      - main

env:
  SHA: $(git rev-parse HEAD)
 
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Get package info
        id: package
        uses: codex-team/action-nodejs-package-info@v1

      - name: Get the output
        run: |
          echo "name: ${{ steps.package.outputs.name }}"
          echo "version: ${{ steps.package.outputs.version }}"
          echo "commit: ${{ env.SHA }}"

      - name: Set Service Key
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.GKE_SA_KEY }}'
 
      - name: Set Project
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: multi-k8s-356605
 
      - name: Auth
        run: |-
          gcloud --quiet auth configure-docker
 
      - name: Get Credentials
        uses: google-github-actions/get-gke-credentials@v0
        with:
          cluster_name: multi-cluster
          location: europe-central2-a

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          # list of Docker images to use as base name for tags
          images: |
            multi-client
            multi-server
            multi-worker
          # generate Docker tags based on the following events/attributes
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      -
        name: Build and push client
        uses: docker/build-push-action@v3
        with:
          context: ./client
          file: ./client/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/multi-client:${{ env.SHA }} , ${{ secrets.DOCKER_USERNAME }}/multi-client:latest
          
      -
        name: Build and push server
        uses: docker/build-push-action@v3
        with:
          context: ./server
          file: ./server/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/multi-server:${{ env.SHA }} , ${{ secrets.DOCKER_USERNAME }}/multi-server:latest

      - 
        name: Build and push worker
        uses: docker/build-push-action@v3
        with:
          context: ./worker
          file: ./worker/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/multi-worker:${{ env.SHA }} , ${{ secrets.DOCKER_USERNAME }}/multi-worker:latest

      # NOT NEEEDED WITH K8S - only for AWS PROD DOCKER
      # - 
      #   name: Build and push nginx
      #   uses: docker/build-push-action@v3
      #   with:
      #     context: ./nginx
      #     file: ./nginx/Dockerfile
      #     push: true
      #     tags: ${{ secrets.DOCKER_USERNAME }}/multi-nginx:${{ steps.package.outputs.version }}
      # - 
      #   name: Generate deployment package
      #   run: zip -r deploy.zip . -x '*.git*'
 
      # - name: Deploy to EB
      #   uses: einaregilsson/beanstalk-deploy@v20
      #   with:
      #     aws_access_key: ${{ secrets.AWS_ACCESS_KEY }}
      #     aws_secret_key: ${{ secrets.AWS_SECRET_KEY }}
      #     application_name: multi-docker
      #     environment_name: Multidocker-env
      #     existing_bucket_name: elasticbeanstalk-us-east-1-761677091962
      #     region: us-east-1
      #     version_label: ${{ github.sha }}
      #     deployment_package: deploy.zip

      - name: Apply k8s
        run: |-
          kubectl apply -f k8s
          kubectl set image deployments/server-deployment server=argalasjr/multi-server:${{ env.SHA }}
          kubectl set image deployments/client-deployment client=argalasjr/multi-client:${{ env.SHA }}
          kubectl set image deployments/worker-deployment worker=argalasjr/multi-worker:${{ env.SHA }}
 
